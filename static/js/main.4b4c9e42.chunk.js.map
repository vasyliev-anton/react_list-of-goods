{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","sortType","NONE","isReversed","this","goods","visibleGoods","sort","g1","g2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","handler","type","setState","forceUpdate","className","classNames","onClick","map","good","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,+FAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAsCE,IAAME,EAAb,4MACEC,MAAQ,CACNC,SAAUJ,EAASK,KACnBC,YAAY,GAHhB,4CAME,WAAU,IAAD,OACP,EAAiCC,KAAKJ,MAA9BC,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,WACZE,EAnCH,SACLA,EADK,GAGJ,IADCJ,EACF,EADEA,SAAUE,EACZ,EADYA,WAENG,EAAY,YAAOD,GAezB,OAbAC,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQR,GACN,KAAKJ,EAASa,SACZ,OAAOF,EAAGG,cAAcF,GAE1B,KAAKZ,EAASe,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OAExB,QACE,OAAO,MAINV,EAAaG,EAAaQ,UAAYR,EAgB7BS,CAAkBjB,EAAiB,CAAEG,WAAUE,eACvDa,EAAU,SAACC,GACf,EAAKC,SAAS,CAAEjB,SAAUgB,IAC1B,EAAKE,eAQP,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEH,KAAK,SACLG,UAAWC,IAAW,iBACpB,CAAE,WAAYpB,IAAaJ,EAASa,WACtCY,QAAS,kBAAMN,EAAQnB,EAASa,WAJlC,iCASA,wBACEO,KAAK,SACLG,UAAWC,IAAW,iBACpB,CAAE,WAAYpB,IAAaJ,EAASe,SACtCU,QAAS,kBAAMN,EAAQnB,EAASe,SAJlC,4BASA,wBACEK,KAAK,SACLG,UAAWC,IAAW,oBACpB,CAAE,YAA2B,IAAflB,IAChBmB,QAAS,kBA7Bf,EAAKJ,SAAS,CAAEf,YAAaA,SAC7B,EAAKgB,eAwBD,sBASElB,IAAaJ,EAASK,MAAQC,IAC9B,wBACEc,KAAK,SACLG,UAAU,4BACVE,QAAS,WACP,EAAKJ,SAAS,CAAEjB,SAAUJ,EAASK,OACnC,EAAKgB,SAAS,CAAEf,YAAY,IAC5B,EAAKgB,eANT,sBAcJ,6BACGd,EAAMkB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,eAlEpC,GAAyBC,aCrDzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4b4c9e42.chunk.js","sourcesContent":["import { Component } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends Component<{}, State> {\n  state = {\n    sortType: SortType.NONE,\n    isReversed: false,\n  };\n\n  render() {\n    const { sortType, isReversed } = this.state;\n    const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n    const handler = (type: SortType) => {\n      this.setState({ sortType: type });\n      this.forceUpdate();\n    };\n\n    const switchReverse = () => {\n      this.setState({ isReversed: !isReversed });\n      this.forceUpdate();\n    };\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames('button is-info',\n              { 'is-light': sortType !== SortType.ALPHABET })}\n            onClick={() => handler(SortType.ALPHABET)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-info',\n              { 'is-light': sortType !== SortType.LENGTH })}\n            onClick={() => handler(SortType.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button is-warning',\n              { 'is-light': isReversed !== true })}\n            onClick={() => switchReverse()}\n          >\n            Reverse\n          </button>\n\n          {(sortType !== SortType.NONE || isReversed) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                this.setState({ sortType: SortType.NONE });\n                this.setState({ isReversed: false });\n                this.forceUpdate();\n              }}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}